{"version":3,"sources":["context/context.tsx","screens/HomeScreen.tsx","Utils/timeUtil.ts","components/Stopwatch.tsx","components/TotalTimeSpent.tsx","screens/Project.tsx","screens/AddTask.tsx","components/ProjectHeader.tsx","routes/homeStack.tsx","App.tsx"],"names":["AppContext","React","createContext","projects","addProject","projectName","colour","addCurrentTime","id","timeSpent","getCurrentTimeSpent","deleteProject","saveData","data","a","async","AsyncStorage","setItem","JSON","stringify","error","alert","AppProvider","children","useState","setProjects","useEffect","getItem","parse","getData","then","Provider","value","filter","project","currentTimeSpent","newList","push","Date","now","toString","elementIndex","findIndex","element","newArray","task","ProjectItem","styled","Pressable","ProjectText","Text","FooterAddButton","View","formatTime","timer","getSeconds","slice","getMinutes","Math","floor","Stopwatch","isActive","isPaused","isReseted","setIsReseted","updateTotalTimeSpent","setTimer","countRef","useRef","current","setInterval","clearInterval","StopwatchStyles","TotalTimeSpent","time","TotalTimeSpentView","TotalTimeSpentTxt","ControlButtonsPress","ControlButtonsContainer","GoBackButton","GoBackButtonText","DeleteButtonText","Card","allColours","black","red","orange","green","blue","purple","pink","ColoursContainer","AddButton","CancelButton","ButtonAddText","ButtonCancelText","Input","TextInput","ProjectHeader","title","Header","TitleText","screens","Home","screen","navigation","useContext","style","flex","FlatList","renderItem","item","index","onPress","navigate","FontAwesome","name","size","color","margin","AntDesign","backgroundColor","navigationOptions","headerTitle","Project","useKeepAwake","setIsActive","setIsPaused","showAlertGoBack","setshowAlertGoBack","showAlertDelete","setshowAlertDelete","currentColor","setCurrentColor","getParam","setCurrentTimeSpent","backHandler","BackHandler","addEventListener","handleReturn","remove","goBack","amount","FontAwesome5","show","showProgress","message","closeOnTouchOutside","closeOnHardwareBackPress","showCancelButton","showConfirmButton","cancelText","confirmText","confirmButtonColor","onCancelPressed","onConfirmPressed","headerLeft","AddTask","text","onChangeText","chosenColour","setchosenColour","maxLength","autoFocus","clearTextOnFocus","placeholder","Object","keys","map","key","Keyboard","dismiss","setTimeout","HomeStack","createStackNavigator","defaultNavigationOptions","headerStyle","headerTitleAlign","headerTitleStyle","createAppContainer","App"],"mappings":"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","file":"static/js/app.8ca136fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst AppContext = React.createContext({\r\n  projects: [{}],\r\n  addProject: (projectName: string, colour: string) => {},\r\n  addCurrentTime: (id: string, timeSpent: number) => {},\r\n  getCurrentTimeSpent: (id: string) => {},\r\n  deleteProject: (id: string) => {},\r\n});\r\n\r\nexport interface ProjectType {\r\n  id: string;\r\n  projectName: string;\r\n  currentTimeSpent: number;\r\n  colour: string;\r\n}\r\n\r\nconst saveData = async (data: ProjectType[]) => {\r\n  try {\r\n    AsyncStorage.setItem(\"data\", JSON.stringify(data));\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n};\r\n\r\nconst getData = async (): Promise<ProjectType[]> => {\r\n  try {\r\n    const data = (await AsyncStorage.getItem(\"data\")) || \"[]\";\r\n    return JSON.parse(data) as ProjectType[];\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n  return [];\r\n};\r\n\r\nconst AppProvider = ({ children }: any) => {\r\n  const [projects, setProjects] = useState<ProjectType[]>([]);\r\n\r\n  useEffect(() => {\r\n    getData().then((projects) => setProjects(projects));\r\n  }, []);\r\n\r\n  const addProject = (projectName: string, colour: string) => {\r\n    if (projectName === \"\") return;\r\n    const newList = [...projects];\r\n    newList.push({\r\n      id: Date.now().toString(),\r\n      projectName: projectName,\r\n      currentTimeSpent: 0,\r\n      colour: colour,\r\n    });\r\n    setProjects(newList);\r\n    saveData(newList);\r\n  };\r\n\r\n  const addCurrentTime = (id: string, timeSpent: number) => {\r\n    const elementIndex = projects.findIndex((element) => element.id == id);\r\n    let newArray = [...projects];\r\n    newArray[elementIndex] = {\r\n      ...newArray[elementIndex],\r\n      currentTimeSpent: (newArray[elementIndex].currentTimeSpent += timeSpent),\r\n    };\r\n    saveData(newArray);\r\n  };\r\n\r\n  const getCurrentTimeSpent = (id: string) => {\r\n    return projects.filter((project) => project.id === id)[0].currentTimeSpent;\r\n  };\r\n\r\n  const deleteProject = (id: string) => {\r\n    const newList = projects.filter((task) => task.id !== id);\r\n    setProjects(newList);\r\n    saveData(newList);\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        getCurrentTimeSpent,\r\n        projects,\r\n        addProject,\r\n        addCurrentTime,\r\n        deleteProject,\r\n      }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AppProvider, AppContext };\r\n","import React, { useContext } from \"react\";\r\nimport { View, Pressable, FlatList } from \"react-native\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\nimport styled from \"styled-components/native\";\r\nimport { AppContext } from \"../context/context\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\n\r\nexport const HomeScreen = ({ navigation }: any) => {\r\n  const { projects } = useContext(AppContext);\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 4 }}>\r\n        <FlatList\r\n          data={projects}\r\n          renderItem={({ item, index }: any) => (\r\n            <ProjectItem\r\n              onPress={() => {\r\n                navigation.navigate(\"Project\", item);\r\n              }}>\r\n              <FontAwesome\r\n                key={index}\r\n                name=\"circle\"\r\n                size={30}\r\n                color={item.colour}\r\n                style={{ margin: 5 }}\r\n              />\r\n              <ProjectText>{item.projectName}</ProjectText>\r\n            </ProjectItem>\r\n          )}\r\n        />\r\n      </View>\r\n      <FooterAddButton>\r\n        <Pressable onPress={() => navigation.navigate(\"AddTask\")}>\r\n          <AntDesign\r\n            name=\"pluscircle\"\r\n            size={80}\r\n            color=\"green\"\r\n            backgroundColor=\"007AFF\"\r\n          />\r\n        </Pressable>\r\n      </FooterAddButton>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst ProjectItem = styled.Pressable`\r\n  align-items: center;\r\n  flex-direction: row;\r\n  border-radius: 6px;\r\n  elevation: 3;\r\n  background-color: #fff;\r\n  box-shadow: 0 1px 1px #333;\r\n  margin: 10px 15px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nconst ProjectText = styled.Text`\r\n  font-size: 19px;\r\n  margin: 10px;\r\n`;\r\n\r\nconst FooterAddButton = styled.View`\r\n  position: absolute;\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: transparent;\r\n  bottom: 0;\r\n`;\r\n","export const formatTime = (timer: number) => {\r\n  const getSeconds = `0${timer % 60}`.slice(-2);\r\n  const minutes: any = `${Math.floor(timer / 60)}`;\r\n  const getMinutes = `0${minutes % 60}`.slice(-2);\r\n  const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n\r\n  return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n};\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { formatTime } from \"../Utils/timeUtil\";\r\n\r\ninterface StopwatchProps {\r\n  isActive: boolean;\r\n  isPaused: boolean;\r\n  isReseted: boolean;\r\n  setIsReseted: (flag: boolean) => void;\r\n  updateTotalTimeSpent: (amount: any) => void;\r\n}\r\n\r\nexport const Stopwatch: React.FC<StopwatchProps> = ({\r\n  isActive,\r\n  isPaused,\r\n  isReseted,\r\n  setIsReseted,\r\n  updateTotalTimeSpent,\r\n}) => {\r\n  const [timer, setTimer] = useState(0);\r\n  const countRef = useRef<any>();\r\n\r\n  const handleStart = () => {\r\n    countRef.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    clearInterval(countRef.current);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    clearInterval(countRef.current);\r\n    updateTotalTimeSpent(timer);\r\n    setTimer(0);\r\n    // save the time later\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      handleStart();\r\n    }\r\n  }, [isActive]);\r\n\r\n  useEffect(() => {\r\n    if (isPaused) {\r\n      handlePause();\r\n    }\r\n  }, [isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (isReseted) {\r\n      handleReset();\r\n      setIsReseted(false);\r\n    }\r\n  }, [isReseted]);\r\n\r\n  return <StopwatchStyles>{formatTime(timer)}</StopwatchStyles>;\r\n};\r\n\r\nconst StopwatchStyles = styled.Text`\r\n  font-size: 40px;\r\n  color: white;\r\n  font-weight: bold;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { formatTime } from \"../Utils/timeUtil\";\r\n\r\ninterface TotalTimeSpentProps {\r\n  time: number;\r\n}\r\n\r\nexport const TotalTimeSpent: React.FC<TotalTimeSpentProps> = ({ time }) => {\r\n  return (\r\n    <TotalTimeSpentView>\r\n      <TotalTimeSpentTxt>Total time spent</TotalTimeSpentTxt>\r\n      <TotalTimeSpentTxt>{formatTime(time)}</TotalTimeSpentTxt>\r\n    </TotalTimeSpentView>\r\n  );\r\n};\r\n\r\nconst TotalTimeSpentTxt = styled.Text`\r\n  font-size: 30px;\r\n`;\r\n\r\nconst TotalTimeSpentView = styled.View`\r\n  flex: 4;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 10px;\r\n  flex-direction: row;\r\n  border-radius: 50px;\r\n  margin: 6px 6px;\r\n  flex-direction: column;\r\n`;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useKeepAwake } from \"expo-keep-awake\";\r\nimport { View, BackHandler, Pressable } from \"react-native\";\r\nimport AwesomeAlert from \"react-native-awesome-alerts\";\r\nimport { AppContext } from \"../context/context\";\r\nimport styled from \"styled-components/native\";\r\nimport { Stopwatch } from \"../components/Stopwatch\";\r\nimport { FontAwesome5 } from \"@expo/vector-icons\";\r\nimport { TotalTimeSpent } from \"../components/TotalTimeSpent\";\r\n\r\nexport const Project = ({ navigation }: any) => {\r\n  useKeepAwake();\r\n  const { addCurrentTime, getCurrentTimeSpent, deleteProject } =\r\n    useContext(AppContext);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showAlertGoBack, setshowAlertGoBack] = useState(false);\r\n  const [showAlertDelete, setshowAlertDelete] = useState(false);\r\n  const [isReseted, setIsReseted] = useState(false);\r\n  const [currentColor, setCurrentColor] = useState(\"black\");\r\n  const [currentTimeSpent, setCurrentTimeSpent] = useState(\r\n    navigation.getParam(\"currentTimeSpent\")\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCurrentColor(navigation.getParam(\"colour\"));\r\n    const backHandler = BackHandler.addEventListener(\"hardwareBackPress\", () =>\r\n      handleReturn()\r\n    );\r\n    return () => backHandler.remove();\r\n  }, []);\r\n\r\n  const handleReturn = () => {\r\n    if (!isActive && !isPaused) {\r\n      navigation.goBack();\r\n      return;\r\n    }\r\n    setshowAlertGoBack(!showAlertGoBack);\r\n    return true;\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setIsPaused(false);\r\n    setIsActive(true);\r\n  };\r\n\r\n  const handlePause = () => {\r\n    setIsActive(false);\r\n    setIsPaused(true);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setIsActive(false);\r\n    setIsPaused(false);\r\n    setIsReseted(true);\r\n  };\r\n\r\n  const updateTotalTimeSpent = (amount: any) => {\r\n    addCurrentTime(navigation.getParam(\"id\"), amount);\r\n    setCurrentTimeSpent(getCurrentTimeSpent(navigation.getParam(\"id\")));\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Card style={{ backgroundColor: currentColor }}>\r\n        <Stopwatch\r\n          isActive={isActive}\r\n          isPaused={isPaused}\r\n          isReseted={isReseted}\r\n          setIsReseted={setIsReseted}\r\n          updateTotalTimeSpent={updateTotalTimeSpent}\r\n        />\r\n      </Card>\r\n      <TotalTimeSpent time={currentTimeSpent} />\r\n      <ControlButtonsContainer>\r\n        {isActive ? (\r\n          <ControlButtonsPress onPress={() => handlePause()}>\r\n            <FontAwesome5 name=\"pause\" size={48} color={currentColor} />\r\n          </ControlButtonsPress>\r\n        ) : (\r\n          <ControlButtonsPress onPress={() => handleStart()}>\r\n            <FontAwesome5 name=\"caret-right\" size={70} color={currentColor} />\r\n          </ControlButtonsPress>\r\n        )}\r\n        <ControlButtonsPress onPress={() => handleReset()}>\r\n          <FontAwesome5 name=\"stop\" size={48} color={currentColor} />\r\n        </ControlButtonsPress>\r\n      </ControlButtonsContainer>\r\n      <GoBackButton>\r\n        <Pressable onPress={handleReturn}>\r\n          <GoBackButtonText>Go back</GoBackButtonText>\r\n        </Pressable>\r\n      </GoBackButton>\r\n      <GoBackButton>\r\n        <Pressable onPress={() => setshowAlertDelete(true)}>\r\n          <DeleteButtonText>Delete</DeleteButtonText>\r\n        </Pressable>\r\n      </GoBackButton>\r\n      <AwesomeAlert\r\n        show={showAlertGoBack}\r\n        showProgress={false}\r\n        title=\"Are you sure?\"\r\n        message=\"All of the progress will be lost!\"\r\n        closeOnTouchOutside={true}\r\n        closeOnHardwareBackPress={false}\r\n        showCancelButton={true}\r\n        showConfirmButton={true}\r\n        cancelText=\"No, cancel\"\r\n        confirmText=\"Yes, go back\"\r\n        confirmButtonColor=\"#DD6B55\"\r\n        onCancelPressed={() => {\r\n          setshowAlertGoBack(!showAlertGoBack);\r\n        }}\r\n        onConfirmPressed={() => {\r\n          setshowAlertGoBack(!showAlertGoBack);\r\n          setIsActive(false);\r\n          setIsPaused(false);\r\n          setIsReseted(false);\r\n          navigation.goBack();\r\n        }}\r\n      />\r\n      <AwesomeAlert\r\n        show={showAlertDelete}\r\n        showProgress={false}\r\n        title=\"Delete this project?\"\r\n        message=\"All of the progress will be lost!\"\r\n        closeOnTouchOutside={true}\r\n        closeOnHardwareBackPress={false}\r\n        showCancelButton={true}\r\n        showConfirmButton={true}\r\n        cancelText=\"No, cancel\"\r\n        confirmText=\"Yes, delete it\"\r\n        confirmButtonColor=\"#DD6B55\"\r\n        onCancelPressed={() => {\r\n          setshowAlertDelete(!showAlertDelete);\r\n        }}\r\n        onConfirmPressed={() => {\r\n          setshowAlertDelete(!showAlertDelete);\r\n\r\n          deleteProject(navigation.getParam(\"id\"));\r\n          navigation.goBack();\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst ControlButtonsPress = styled.Pressable`\r\n  padding: 20px;\r\n  margin: 10px;\r\n  width: 30%;\r\n  align-items: center;\r\n`;\r\n\r\nconst ControlButtonsContainer = styled.Pressable`\r\n  flex: 4;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 10px;\r\n  flex-direction: row;\r\n  border-radius: 50px;\r\n  margin: 6px 6px;\r\n`;\r\n\r\nconst DeleteButton = styled.Pressable`\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  padding: 10px;\r\n`;\r\n\r\nconst GoBackButton = styled.View`\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 1;\r\n  margin-bottom: 30px;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst GoBackButtonText = styled.Text`\r\n  color: green;\r\n  font-size: 30px;\r\n`;\r\nconst DeleteButtonText = styled.Text`\r\n  color: red;\r\n  font-size: 15px;\r\n`;\r\n\r\nconst Card = styled.View`\r\n  flex: 4;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 10px;\r\n  flex-direction: row;\r\n  border-radius: 20px;\r\n  margin: 15px 15px;\r\n`;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Pressable, View, Keyboard } from \"react-native\";\r\nimport { AppContext } from \"../context/context\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport styled from \"styled-components/native\";\r\n\r\nconst allColours = {\r\n  black: \"black\",\r\n  red: \"red\",\r\n  orange: \"orange\",\r\n  green: \"green\",\r\n  blue: \"blue\",\r\n  purple: \"purlpe\",\r\n  pink: \"pink\",\r\n};\r\n\r\nexport const AddTask = ({ navigation }: any) => {\r\n  const { addProject } = useContext(AppContext);\r\n  const [text, onChangeText] = useState(\"\");\r\n  const [chosenColour, setchosenColour] = useState(allColours.green);\r\n\r\n  const buttonClickListener = () => {\r\n    if (text === \"\") return;\r\n    Keyboard.dismiss();\r\n    setTimeout(() => {\r\n      onChangeText(\"\");\r\n      addProject(text, chosenColour);\r\n      navigation.goBack();\r\n    }, 100);\r\n  };\r\n\r\n  const handleCanceled = () => {\r\n    Keyboard.dismiss();\r\n    setTimeout(() => {\r\n      navigation.goBack();\r\n    }, 100);\r\n  };\r\n\r\n  const handleColourChange = (colour: string) => {\r\n    setchosenColour(colour);\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1 }}>\r\n        <Input\r\n          onChangeText={onChangeText}\r\n          value={text}\r\n          maxLength={30}\r\n          autoFocus={true}\r\n          clearTextOnFocus={true}\r\n          placeholder=\"Project name\"\r\n        />\r\n        <ColoursContainer>\r\n          {Object.keys(allColours).map((key, index) => {\r\n            return (\r\n              <Pressable key={index} onPress={() => handleColourChange(key)}>\r\n                <FontAwesome\r\n                  name=\"circle\"\r\n                  size={40}\r\n                  color={key}\r\n                  style={{ margin: 5 }}\r\n                />\r\n              </Pressable>\r\n            );\r\n          })}\r\n        </ColoursContainer>\r\n        <View>\r\n          <AddButton\r\n            style={{ backgroundColor: chosenColour }}\r\n            onPress={() => buttonClickListener()}>\r\n            <ButtonAddText>Add this project</ButtonAddText>\r\n          </AddButton>\r\n        </View>\r\n        <View>\r\n          <CancelButton>\r\n            <Pressable onPress={() => handleCanceled()}>\r\n              <ButtonCancelText>Cancel</ButtonCancelText>\r\n            </Pressable>\r\n          </CancelButton>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst ColoursContainer = styled.View`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst AddButton = styled.Pressable`\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 10px;\r\n  flex-direction: row;\r\n  border-radius: 50px;\r\n  elevation: 3;\r\n  box-shadow: 0 1px 1px #333;\r\n  margin: 6px 6px;\r\n`;\r\n\r\nconst CancelButton = styled.Pressable`\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 10px;\r\n  flex-direction: row;\r\n  border-radius: 50px;\r\n  background-color: transparent;\r\n  margin: 6px 6px;\r\n`;\r\n\r\nconst ButtonAddText = styled.Text`\r\n  color: white;\r\n  font-size: 25px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst ButtonCancelText = styled.Text`\r\n  color: green;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Input = styled.TextInput`\r\n  padding: 10px 10px;\r\n  flex-direction: row;\r\n  border-radius: 6px;\r\n  elevation: 3;\r\n  background-color: #fff;\r\n  box-shadow: 0 1px 1px #333;\r\n  margin: 40px 6px;\r\n  font-size: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components/native\";\r\n\r\nexport const ProjectHeader = ({ title }: any) => {\r\n  return (\r\n    <Header>\r\n      <TitleText>{title}</TitleText>\r\n    </Header>\r\n  );\r\n};\r\n\r\nconst TitleText = styled.Text`\r\n  color: white;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Header = styled.View`\r\n  flex: 1;\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import React from \"react\";\r\nimport { createStackNavigator } from \"react-navigation-stack\";\r\nimport { createAppContainer } from \"react-navigation\";\r\nimport { HomeScreen } from \"../screens/HomeScreen\";\r\nimport { Project } from \"../screens/Project\";\r\nimport { AddTask } from \"../screens/AddTask\";\r\nimport { ProjectHeader } from \"../components/ProjectHeader\";\r\n\r\nconst screens = {\r\n  Home: {\r\n    screen: HomeScreen,\r\n    navigationOptions: () => {\r\n      return {\r\n        headerTitle: () => <ProjectHeader title={\"Home\"} />,\r\n      };\r\n    },\r\n  },\r\n  Project: {\r\n    screen: Project,\r\n    navigationOptions: ({ navigation }: any) => {\r\n      return {\r\n        headerTitle: () => (\r\n          <ProjectHeader title={navigation.getParam(\"projectName\")} />\r\n        ),\r\n        headerLeft: () => null,\r\n      };\r\n    },\r\n  },\r\n  AddTask: {\r\n    screen: AddTask,\r\n    navigationOptions: () => {\r\n      return {\r\n        headerTitle: () => <ProjectHeader title={\"Add a new project\"} />,\r\n      };\r\n    },\r\n  },\r\n};\r\n\r\nconst HomeStack = createStackNavigator(screens, {\r\n  defaultNavigationOptions: {\r\n    headerStyle: {\r\n      backgroundColor: \"green\",\r\n    },\r\n    headerTitleAlign: \"center\",\r\n    headerTitleStyle: {\r\n      color: \"white\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default createAppContainer(HomeStack);\r\n","import React from \"react\";\r\nimport { AppProvider } from \"./context/context\";\r\nimport Navigator from \"./routes/homeStack\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <AppProvider>\r\n      <Navigator />\r\n    </AppProvider>\r\n  );\r\n}\r\n"],"sourceRoot":""}